[["climate-scenarios.html", "Section 13 Climate Scenarios 13.1 Introduction 13.2 Setup 13.3 Re-Calculating Management 13.4 Executing model 13.5 Processing Results 13.6 Output Analysis 13.7 Saving RDS", " Section 13 Climate Scenarios RUN_THIS_CHAPTER &lt;- TRUE RECALC_FARMR &lt;- FALSE 13.1 Introduction See section 7.1 of the modelling protocol for reference This workflow is adapted / inspired from: https://github.com/biopsichas/cliwf The climate scenario files have been sourced from the OPTAIN cloud: WPs &amp; Tasks &gt; WP3 &gt; Task_3_2 &gt; local data &gt; v1a &gt; data And are stored here: \"model_data/input/climate\" The following models are being used: Model number Driving model (GCM) Ensemble RCM End date Model code 1 EC-EARTH r12i1p1 CCLM4-8-17 31.12.2100 earthcclm 2 EC-EARTH r3i1p1 HIRHAM5 31.12.2100 earthhirh 3 HadGEM2-ES r1i1p1 HIRHAM5 30.12.2099 hadghirh 4 HadGEM2-ES r1i1p1 RACMO22E 30.12.2099 hadgracmo 5 HadGEM2-ES r1i1p1 RCA4 30.12.2099 hadgrca 6 MPI-ESM-LR r2i1p1 REMO2009 31.12.2100 mpiremo Originally these models were bias adjusted to ERA5-Land, but it was found that ERA5 was too “wet”, therefore they were re-adjusted to local data. The local data used to re-adjust our dataset for CS10 was the local Aas station. However, in this process we lost the “gridded” version of our dataset, and must now work with only one station. An issue (#97) has been created to discuss and potentially fix this. 13.2 Setup We need the following packages: # parallel library(doParallel) library(foreach) # spatial require(sf) # SWAT require(SWATprepR) # We need FarmR 3.2 from optain cloud: # WPs &amp; Tasks &gt; WP4 &gt; Task 4.4 &gt; Tools to Share &gt; workflow_scripts &gt; SWATfarmR_3.2.0.zip require(SWATfarmR) # Data require(dplyr) require(readr) # famrR input source(&#39;model_data/code/functions_write_SWATfarmR_input.R&#39;) require(tidyr) require(purrr) require(reshape2) We need to create a SWAT+ setup for each climate scenario (3), RCM (6) and time frame (3) = 54 setups. # indicators periods &lt;- c(&quot;H&quot;, &quot;N&quot;, &quot;F&quot;) model_nr &lt;- paste0(&quot;rcm&quot;, 1:6) experiments = c(&quot;rcp26&quot;, &quot;rcp45&quot;, &quot;rcp85&quot;) dir.create(&quot;model_data/cs10_setup/scenarios&quot;, showWarnings = F) dir.create(&quot;model_data/cs10_setup/scenarios/climate_scenarios&quot;, showWarnings = F) We will now modify our base setup MetNord_MN2 to be prepared for scenario runs # make a copy of the base-base setup base_setup &lt;- &quot;model_data/cs10_setup/txtinout_best_cal&quot; base_scen &lt;- &#39;model_data/cs10_setup/scenarios/baseline&#39; dir.create(&#39;model_data/cs10_setup/scenarios/baseline&#39;, showWarnings = F) files_to_copy &lt;- list.files(base_setup, full.names = T) status &lt;- file.copy(from = files_to_copy, to =base_scen, overwrite = T) We reset our management settings: # resetting the farmR files dir &lt;- &#39;model_data/cs10_setup/scenarios/baseline&#39; # SWATfarmR::load_farmr(file = paste0(dir,&quot;/cs10.farm&quot;)) # cs10$reset_files() unlink(paste0(dir,&quot;/cs10.farm&quot;)) unlink(paste0(dir, &quot;/cs10.mgts&quot;)) We update our atmospheric data: basin_path &lt;- &quot;model_data/input/shape/cs10_basin.shp&quot; df &lt;- SWATprepR::get_atmo_dep(basin_path) ## [1] &quot;Working on year 1990&quot; ## [1] &quot;Finished data extraction for year 1990&quot; ## [1] &quot;Working on year 1991&quot; ## [1] &quot;Finished data extraction for year 1991&quot; ## [1] &quot;Working on year 1992&quot; ## [1] &quot;Finished data extraction for year 1992&quot; ## [1] &quot;Working on year 1993&quot; ## [1] &quot;Finished data extraction for year 1993&quot; ## [1] &quot;Working on year 1994&quot; ## [1] &quot;Finished data extraction for year 1994&quot; ## [1] &quot;Working on year 1995&quot; ## [1] &quot;Finished data extraction for year 1995&quot; ## [1] &quot;Working on year 1996&quot; ## [1] &quot;Finished data extraction for year 1996&quot; ## [1] &quot;Working on year 1997&quot; ## [1] &quot;Finished data extraction for year 1997&quot; ## [1] &quot;Working on year 1998&quot; ## [1] &quot;Finished data extraction for year 1998&quot; ## [1] &quot;Working on year 1999&quot; ## [1] &quot;Finished data extraction for year 1999&quot; ## [1] &quot;Working on year 2000&quot; ## [1] &quot;Finished data extraction for year 2000&quot; ## [1] &quot;Working on year 2001&quot; ## [1] &quot;Finished data extraction for year 2001&quot; ## [1] &quot;Working on year 2002&quot; ## [1] &quot;Finished data extraction for year 2002&quot; ## [1] &quot;Working on year 2003&quot; ## [1] &quot;Finished data extraction for year 2003&quot; ## [1] &quot;Working on year 2004&quot; ## [1] &quot;Finished data extraction for year 2004&quot; ## [1] &quot;Working on year 2005&quot; ## [1] &quot;Finished data extraction for year 2005&quot; ## [1] &quot;Working on year 2006&quot; ## [1] &quot;Finished data extraction for year 2006&quot; ## [1] &quot;Working on year 2007&quot; ## [1] &quot;Finished data extraction for year 2007&quot; ## [1] &quot;Working on year 2008&quot; ## [1] &quot;Finished data extraction for year 2008&quot; ## [1] &quot;Working on year 2009&quot; ## [1] &quot;Finished data extraction for year 2009&quot; ## [1] &quot;Working on year 2010&quot; ## [1] &quot;Finished data extraction for year 2010&quot; ## [1] &quot;Working on year 2011&quot; ## [1] &quot;Finished data extraction for year 2011&quot; ## [1] &quot;Working on year 2012&quot; ## [1] &quot;Finished data extraction for year 2012&quot; ## [1] &quot;Working on year 2013&quot; ## [1] &quot;Finished data extraction for year 2013&quot; ## [1] &quot;Working on year 2014&quot; ## [1] &quot;Finished data extraction for year 2014&quot; ## [1] &quot;Working on year 2015&quot; ## [1] &quot;Finished data extraction for year 2015&quot; ## [1] &quot;Working on year 2016&quot; ## [1] &quot;Finished data extraction for year 2016&quot; ## [1] &quot;Working on year 2017&quot; ## [1] &quot;Finished data extraction for year 2017&quot; ## [1] &quot;Working on year 2018&quot; ## [1] &quot;Finished data extraction for year 2018&quot; ## [1] &quot;Working on year 2019&quot; ## [1] &quot;Finished data extraction for year 2019&quot; ## [1] &quot;Working on year 2020&quot; ## [1] &quot;Finished data extraction for year 2020&quot; ## [1] &quot;Working on year 2021&quot; ## [1] &quot;Finished data extraction for year 2021&quot; ## [1] &quot;Working on year 2022&quot; ## [1] &quot;Finished data extraction for year 2022&quot; hacked_atmodep &lt;- function(df, db_path, t_ext) { tryCatch( { SWATprepR::add_atmo_dep(df,db_path, t_ext) }, error = function(e) { message(&#39;cheeky way to mess with SWATjunaS code&#39;) print(e) } ) } hacked_atmodep(df, &quot;model_data/cs10_setup/scenarios/baseline/&quot;, &quot;annual&quot;) ## [1] &quot;weather-sta.cli file was successfully updated.&quot; ## [1] &quot;codes.bsn file was successfully updated.&quot; ## [1] &quot;Atmospheric deposition data were written into model_data/cs10_setup/scenarios/baseline/ directory.&quot; Set our output in line with OPTAIN project: Warning: The “gsub” method has been faulty – double check that it worked.. ## Input for the print file print_prt &lt;- read_lines(paste0(base_scen,&#39;/print.prt&#39;), lazy = FALSE) ### WARNING !!!!!!!!!!!!!!! THIS DOESNT WORK OFTEN because OF THE SPACES IN GSUB print_prt &lt;- gsub(&quot; y &quot;, &quot; n &quot;, print_prt) print_prt[10+1] &lt;- &quot;basin_wb n y n y &quot; print_prt[14] &lt;- &quot;basin_pw n y n y &quot; print_prt[15] &lt;- &quot;basin_aqu n y n y &quot; print_prt[33] &lt;- &quot;hru_wb n y n y &quot; print_prt[34] &lt;- &quot;hru_nb n n n y &quot; print_prt[35] &lt;- &quot;hru_ls n n n y &quot; print_prt[36] &lt;- &quot;hru_pw n n n y &quot; print_prt[42] &lt;- &quot;channel_sd n n n y &quot; print_prt[44] &lt;- &quot;reservoir n n n y &quot; print_prt &lt;- gsub(&quot;hnd &quot;, &quot;hyd&quot;, print_prt) write_lines(print_prt, paste0(base_scen,&#39;/print.prt&#39;)) ## Write object.prt # Set outflow channel ID outflow_reach &lt;- 37 obj_prt_path &lt;- paste0(base_scen,&#39;/object.prt&#39;) unlink(obj_prt_path) write.table(paste0(&quot;object.prt&quot;, &quot;: written by the modded climate-workflow on &quot;, Sys.time()), obj_prt_path, append = FALSE, sep = &quot;\\t&quot;, dec = &quot;.&quot;, row.names = FALSE, col.names = FALSE, quote = FALSE) write.table(paste(sprintf(c(rep(&#39;%12s&#39;, 4), &#39;%20s&#39;), c(&quot;ID&quot;, &quot;OBJ_TYP&quot;, &quot;OBJ_TYP_NO&quot;, &quot;HYD_TYP&quot;, &quot;FILENAME&quot;)), collapse = &#39; &#39;), obj_prt_path , append = TRUE, sep = &quot;\\t&quot;, dec = &quot;.&quot;, row.names = FALSE, col.names = FALSE, quote = FALSE) write.table(paste(sprintf(c(rep(&#39;%12s&#39;, 4), &#39;%20s&#39;), c(&quot;1&quot;, &quot;sdc&quot;, as.character(outflow_reach), &quot;tot&quot;, &quot;cha_day.out&quot;)), collapse = &#39; &#39;), obj_prt_path , append = TRUE, sep = &quot;\\t&quot;, dec = &quot;.&quot;, row.names = FALSE, col.names = FALSE, quote = FALSE) # Updating file.cio file_cio &lt;- readLines(paste0(base_scen, &quot;/&quot;, &quot;file.cio&quot;)) file_cio[2] &lt;- &quot;simulation time.sim print.prt object.prt object.cnt null &quot; file_cio[22] &lt;- &quot;chg cal_parms.cal calibration.cal null null null null null null null &quot; writeLines(file_cio, paste0(base_scen, &quot;/&quot;, &quot;file.cio&quot;)) This function will setup our scenario directories with the reference files and climate files based on the run ID we give it. cli_scen_setup &lt;- function(run_name, base_setup){ # all files that are not climate files, they should be copied in non_climate_files &lt;- setdiff(list.files(path = base_setup, full.names = TRUE), list.files(path = base_setup, pattern = &quot;*.pcp|*.slr|*.tmp|*.hmd|*.wnd&quot;, full.names = TRUE)) # getting out the model and experiment from the directory name parsed_run &lt;- stringr::str_split(run_name, pattern = &quot;_&quot;,simplify = T ) experiment &lt;- parsed_run[,1] model &lt;- parsed_run[,2] # from where and to where should the climate files be copied in? from_dir &lt;- paste0(&quot;model_data/input/climate/&quot;, experiment, &quot;/&quot;, model) from_files &lt;- list.files(from_dir, full.names = T) to_dir &lt;- paste0(&quot;model_data/cs10_setup/scenarios/climate_scenarios/&quot;, run_name) # create the directory dir.create(to_dir, showWarnings = FALSE) # copy over climate scenario files file.copy(from = from_files, to = to_dir, overwrite = T) # copy over baseline swat+ files. file.copy(from = non_climate_files, to = to_dir, overwrite = T) } This is the list of runs we need to process: run_name &lt;- c() for (period in periods){for (model in model_nr){for (experiment in experiments){ run_name &lt;- c( run_name, paste(experiment, model, period, sep = &quot;_&quot;)) }}} run_name &lt;- sample(run_name) # randomize order run_name ## [1] &quot;rcp45_rcm6_N&quot; &quot;rcp45_rcm5_H&quot; &quot;rcp85_rcm5_N&quot; &quot;rcp85_rcm6_N&quot; &quot;rcp85_rcm5_H&quot; ## [6] &quot;rcp85_rcm5_F&quot; &quot;rcp45_rcm2_F&quot; &quot;rcp26_rcm4_F&quot; &quot;rcp26_rcm4_H&quot; &quot;rcp45_rcm1_F&quot; ## [11] &quot;rcp26_rcm3_H&quot; &quot;rcp85_rcm4_N&quot; &quot;rcp85_rcm6_H&quot; &quot;rcp26_rcm6_F&quot; &quot;rcp45_rcm3_F&quot; ## [16] &quot;rcp26_rcm2_F&quot; &quot;rcp26_rcm1_N&quot; &quot;rcp45_rcm5_N&quot; &quot;rcp45_rcm4_H&quot; &quot;rcp85_rcm4_H&quot; ## [21] &quot;rcp26_rcm5_F&quot; &quot;rcp85_rcm2_F&quot; &quot;rcp26_rcm5_N&quot; &quot;rcp26_rcm2_N&quot; &quot;rcp45_rcm2_H&quot; ## [26] &quot;rcp26_rcm1_H&quot; &quot;rcp26_rcm4_N&quot; &quot;rcp85_rcm6_F&quot; &quot;rcp26_rcm3_F&quot; &quot;rcp26_rcm6_N&quot; ## [31] &quot;rcp85_rcm1_H&quot; &quot;rcp45_rcm6_H&quot; &quot;rcp85_rcm1_F&quot; &quot;rcp45_rcm3_N&quot; &quot;rcp26_rcm1_F&quot; ## [36] &quot;rcp45_rcm5_F&quot; &quot;rcp45_rcm1_H&quot; &quot;rcp85_rcm2_H&quot; &quot;rcp85_rcm3_N&quot; &quot;rcp85_rcm2_N&quot; ## [41] &quot;rcp45_rcm4_F&quot; &quot;rcp45_rcm4_N&quot; &quot;rcp26_rcm5_H&quot; &quot;rcp85_rcm3_H&quot; &quot;rcp45_rcm6_F&quot; ## [46] &quot;rcp45_rcm2_N&quot; &quot;rcp45_rcm1_N&quot; &quot;rcp26_rcm2_H&quot; &quot;rcp85_rcm3_F&quot; &quot;rcp45_rcm3_H&quot; ## [51] &quot;rcp26_rcm6_H&quot; &quot;rcp85_rcm4_F&quot; &quot;rcp85_rcm1_N&quot; &quot;rcp26_rcm3_N&quot; This will create the directories in a parallel manner cores &lt;- detectCores() - 2 print(paste(&quot;generating directories with&quot;, cores, &quot; cores&quot;)) ## [1] &quot;generating directories with 30 cores&quot; cl &lt;- makeCluster(cores, outfile=&quot;&quot;) registerDoParallel(cl) result &lt;- foreach(run_name = run_name) %dopar% { cli_scen_setup(run_name = run_name, base_setup = base_scen) } stopCluster(cl) if(length(which(unlist(result) == FALSE)) &gt; 0){warning(&quot;some runs failed!&quot;)}else{ print(&quot;all threads succeded&quot;) } ## [1] &quot;all threads succeded&quot; Now, we need to update our time frames, met definitions, and weather generators. The following function does this using SWATprepR. update_weather &lt;- function(run_name){ # getting out the model and experiment from the directory name parsed_run &lt;- stringr::str_split(run_name, pattern = &quot;_&quot;, simplify = T) period &lt;- parsed_run[, 3] ## Set the simulation time period if(period == &quot;H&quot;) {from = 1988;to = 2020} if(period == &quot;N&quot;){from = 2033;to = 2065} if(period == &quot;F&quot;) {from = 2067;to = 2098} # updating climate mydir &lt;- paste0(&quot;model_data/cs10_setup/scenarios/climate_scenarios/&quot;,run_name) met_lst &lt;- SWATprepR::load_swat_weather(mydir) from_date &lt;- paste0(from, &quot;-01-01&quot;) to_date &lt;- paste0(to, &quot;-12-31&quot;) # without garbage collection here, everything goes wrong. gc() SWATprepR::prepare_climate( meteo_lst = met_lst, write_path = mydir, period_starts = from_date, period_ends = to_date) } Executing the update_weather() function in parallel. Caution, each core uses about 2GB+ of RAM. Only use a few cores for this, not all you have. It also does not take that long. # cores &lt;- detectCores() - 8 cores &lt;- 12 # this is EXTREMELY memory hungry PER CORE, be careful. # 12 cores uses 20 gb print(paste(&quot;working with&quot;, cores, &quot; cores&quot;)) ## [1] &quot;working with 12 cores&quot; cl &lt;- makeCluster(cores, outfile=&quot;&quot;) registerDoParallel(cl) myresult &lt;- foreach(run_name = run_name, .packages = c(&quot;SWATprepR&quot;, &quot;stringr&quot;)) %dopar% {update_weather(run_name)} stopCluster(cl) if(length(which(unlist(myresult) == FALSE)) &gt; 0){warning(&quot;some runs failed!&quot;)}else{ print(&quot;all threads succeded&quot;) } ## [1] &quot;all threads succeded&quot; 13.3 Re-Calculating Management Now we are ready to re-calculate the management for all scenario runs. We need to do this because the “weather” has changed and therefore our virtual farmers need to change when they sow and harvest. First, we need to create farmR input files for the time frames we now have, the following code does this: Now we are ready for the long calculation. The following function will re-calculate management operations, and can do so in a parallel manner, which we will need because one run takes about 2-4 hours, and we have 54 of them. With the current setup (cpu42) we can run 30 at once. farmer_resechedule &lt;- function(run_name){ print(paste(&quot;working on&quot;, run_name)) # parsing period parsed_run &lt;- stringr::str_split(run_name, pattern = &quot;_&quot;,simplify = T ) period &lt;- parsed_run[,3] if(period == &quot;H&quot;) {from = 1988;to = 2020} if(period == &quot;N&quot;){from = 2033;to = 2065} if(period == &quot;F&quot;) {from = 2067;to = 2098} # farmR input path wd &lt;- &quot;model_data/cs10_setup/scenarios/climate_scenarios/&quot; dir &lt;- paste0(wd, run_name) fip &lt;- paste0(&quot;model_data/input/management/farmR_input_&quot;, from, &quot;_&quot;, to, &quot;.csv&quot;) farmscen &lt;- SWATfarmR::farmr_project$new(project_name = run_name, project_path = dir) farmscen$read_management(file = fip, discard_schedule = T) pcp &lt;- farmscen$.data$variables$pcp if((pcp$date %&gt;% last() == paste0(to,&quot;-12-31&quot;)) == FALSE){ stop(run_name, &quot;has issues with the end day&quot;) } # using temp API # TODO add real API # Extract the hydrologic soil group values for all HRUs hsg &lt;- select(farmscen$.data$meta$hru_attributes, hru, hyd_grp) # Calculate api values for the hsg classes A to D api_A &lt;- variable_decay(variable = pcp, n_steps = -5, decay_rate = 1) api_B &lt;- variable_decay(variable = pcp, n_steps = -5, decay_rate = 0.8) api_C &lt;- variable_decay(variable = pcp, n_steps = -5, decay_rate = 0.7) api_D &lt;- variable_decay(variable = pcp, n_steps = -5, decay_rate = 0.5) # Bind the data together into one api table and name them with the hsgs api &lt;- bind_cols(api_A, api_B, api_C, api_D) names(api) &lt;- c(&#39;api_A&#39;, &#39;api_B&#39;, &#39;api_C&#39;, &#39;api_D&#39;) # To add the variable to the farmR you have to tell it which variables are # assigned to which HRUs hru_asgn &lt;- mutate(hsg, api = paste0(&#39;api_&#39;, hyd_grp)) %&gt;% select(hru, api) # Add the variable api to the farmR project farmscen$add_variable(data = api, name = &#39;api&#39;, assign_unit = hru_asgn, overwrite = T) # Schedule operations farmscen$schedule_operations(start_year = from, end_year = to, n_schedule = 2, replace = &quot;all&quot;) # Write operations farmscen$write_operations(start_year = from, end_year = to) } Here we execute the parallel calculation of FarmR runs: This will take very long (about 4.6 hours) cores &lt;- detectCores() - 2 print(paste(&quot;working with&quot;, cores, &quot; cores&quot;)) t1 = Sys.time() cl &lt;- makeCluster(cores, outfile=&quot;&quot;) registerDoParallel(cl) farmRresult &lt;- foreach(run_name = run_name,.packages = c(&quot;SWATfarmR&quot;, &quot;stringr&quot;, &quot;dplyr&quot;)) %dopar% { farmer_resechedule(run_name = run_name) } stopCluster(cl) t2 = Sys.time() if(length(which(unlist(myresult) == FALSE)) &gt; 0){warning(&quot;some runs failed!&quot;)}else{ print(&quot;all threads succeded&quot;) print(t2-t1) } Back up the farmers and their calculated managements. Question: WHERE HAS THE .FARM FILE GONE? not used in farmR 3.2? scen_dir &lt;- &quot;model_data/cs10_setup/scenarios/climate_scenarios/&quot; our_farmers &lt;- list.files(scen_dir, pattern = &quot;*.mgts&quot;, recursive = T, full.names = T) dir.create(&quot;model_data/input/climate/scenario_farmers&quot;, showWarnings = F) file.copy(our_farmers, to = &quot;model_data/input/climate/scenario_farmers&quot;, overwrite = T) Now, if we would like to skip re-calculating the FarmR, we can just load in the backups: if(RECALC_FARMR == FALSE) { for (run in run_name) { from = paste0(&quot;model_data/input/climate/scenario_farmers/&quot;, run, &quot;.mgts&quot;) to = paste0(&quot;model_data/cs10_setup/scenarios/climate_scenarios/&quot;, run) file.copy(from = from, to = to, overwrite = F) } } 13.4 Executing model This code looks like it was written by a neanderthal, but it gets the job done. (Run time: 1.3 hours) swatt1 &lt;- Sys.time() m_dir &lt;- list.dirs(&quot;model_data/cs10_setup/scenarios/climate_scenarios/&quot;, recursive = F, full.names = T) wd &lt;- getwd() swat_path &lt;- &quot;D:/git/swat-cs10/model_data/cs10_setup/Rev_61_0_64rel.exe&quot; swat_exe &lt;- &quot;Rev_61_0_64rel.exe&quot; cores = detectCores() - 2 library(doParallel) require(foreach) cl &lt;- makeCluster(cores, outfile=&quot;&quot;) registerDoParallel(cl) txt_info &lt;- foreach (d = m_dir) %dopar% { # run SWAT for all cal files in parallel setwd(paste(wd, d, sep=&#39;/&#39;)) file.copy(swat_path, swat_exe) system(swat_exe) } stopCluster(cl) swatt2 &lt;- Sys.time() if((txt_info %&gt;% unlist() %&gt;% sum())&gt;0){ warning(&quot;some SWAT+ runs had non-zero exit status!\\n&quot;) print(swatt2-swatt1) print(txt_info) }else{ print(&quot;all swat runs succeeded&quot;) print(swatt2-swatt1) } ## [1] &quot;all swat runs succeeded&quot; ## Time difference of 1.567261 hours 13.5 Processing Results We need to define some settings: outflow_reach is our outflow channel ID from buildR (unconfirmed) sw_periods: The start and end months of soil-water analysis. crop_sel: The crops to analyze grain_units: These values come from Felix Witing. The reference for these values is “3120100-0000.xlsx Getreideeinheitenschlüssel” from BMEL. some info: “The reference values for the crop-specific grain units have been updated in 2010. The Excel file contains both, the old and the new values. Important: the values refer to fresh matter crop yield!” Some background on the update process can be found in this report. Cleaning up tmp_path &lt;- &quot;model_data/cs10_setup/scenarios/&quot; cl &lt;- makeCluster(cores, outfile=&quot;&quot;) registerDoParallel(cl) pres &lt;- foreach (d = m_dir) %dopar% { setwd(paste(wd, d, sep=&#39;/&#39;)) cal &lt;- paste(wd, tmp_path, &quot;scs_results&quot;, tail(unlist(strsplit(d,&#39;/&#39;)), n = 1), sep = &quot;/&quot;) dir.create(cal, recursive = TRUE) dir.create(&quot;RESULTS&quot;, showWarnings = F) files.out.aa &lt;- list.files(pattern = &#39;aa&#39;, full.names = T) files.out.mon &lt;- list.files(pattern = &#39;mon&#39;, full.names = T) files.out.day &lt;- list.files(pattern = &#39;day&#39;, full.names = T) files.help &lt;- c(&#39;hru.con&#39;) # please provide hru_agr.txt file &#39;hru_agr.txt&#39; ## (cropland hru names) in txt folder file.copy( from = c(files.out.aa, files.out.mon, files.out.day, files.help), to =cal, overwrite = T ) unlink(swat_exe) } stopCluster(cl) Data processing and plotting, done by Micha’s code. require(readr) require(tidyverse) require(data.table) require(xts) require(dygraphs) require(R.utils) require(foreach) require(doParallel) require(data.table) require(ggplot2) require(fmsb) require(dplyr) # dplyr must be loaded last. source(&#39;model_data/code/calc_Indis.R&#39;) TODO: We need to set the thresholds!! See issue #102 outflow_reach &lt;- 37 ### collect HRU-based indicators related to water quantity (average annual for ## specified months) ## please specify start and end months of interest for the soil water analysis sw_periods &lt;- list(c(5:9), 5, 6, 7, 8, 9) #this is an example for printing sw for ## the period May to September and also for each single month in that period ### collect cropping information for all scenarios - grain units and cultivated ## hectare average annual ## define 1) path, 2) crop selection, 3) type of output: a) yield, b) ha, 4) ## specify grain units equivalent for # all of the selected crops (if you just keep the parameter &#39;grain_units&#39;, ## there is already a parameterisation for # &#39;wwht&#39;, &#39;akgs&#39;, &#39;wbar&#39;, &#39;wira&#39;, &#39;csil&#39;, &#39;wiry&#39;, &#39;sgbt&#39;,&#39;barl&#39; # the measure list (measr.list) can be adapted to the measures you want to compare ## Crop selection crop_sel &lt;- c(&quot;wwht&quot;, &quot;barl&quot;, &quot;oats&quot;, &quot;swht&quot;, &quot;pota&quot;) ## Grain units grain_units &lt;- data.frame(&#39;wwht&#39; = 1.209, &#39;barl&#39; = 1.163, &quot;oats&quot; = .84, &quot;swht&quot; = 1.04, &quot;pota&quot; = .22) ## Thresholds for nutrient and sediment concentrations for output analysis # thresholds for nitrogen concentration (mg N/l) and phosphorus concentration (mg P/l) # the number of days beyond these thresholds will later be calculated # default value are the respective median values of reported threshold values # for very small siliceous rivers in lowland across Europe # (https://www.sciencedirect.com/science/article/pii/S0048969719338380) # please check if this is appropriate for your case study (e.g. type of river) # feel free to use other threshold values!! # TN - 775 ug/l, TP - 60 ug/l threshold_N=0.775 threshold_P=0.06 # threshold for sediment concentration (mg N/l) # the number of days beyond this threshold will later be calculated # default value is 50 mg/l (missing reference), # if you know a reference please let me know (michael.strauch@ufz.de) # feel free to use another threshold value!! threshold_Sed=50 13.6 Output Analysis (warranty provided by Micha ;) In the following functions to calculate indicators are applied. Please adjust function parameters (e.g. channel name, see also header information of calc_Indis.R). In case an ensemble of calibration files is provided (in folder cal_files), set ensemble=T. - The resulting dataframe will provide you the ensemble mean as well as the ensemble minimum (lower) and maximum (upper) of the respective indicator. - If no cal file ensemble can be provided, set ensemble=F (but then make sure you have a calibration.cal with fitted parameters in the txt folder)&quot; ## Direstory with the simulation results path &lt;- &quot;model_data/cs10_setup/scenarios/scs_results&quot; ### collect average annual output of water quantity and quality at outlet channel ## (aggregated comparison) r_dir &lt;- list.dirs(path, recursive = TRUE)[-1] rch &lt;- sprintf(&quot;cha%03d&quot;, outflow_reach) ##------------------------------------------------------------------------------ ## 10) Output analysis from Micha (warranty provided by Micha ;) ##------------------------------------------------------------------------------ ### In the following functions to calculate indicators are applied ### Please adjust function parameters (e.g. channel name, see also header ## information of calc_Indis.R) ### In case an ensemble of calibration files is provided (in folder cal_files), ## set ensemble=T ### The resulting dataframe will provide you the ensemble mean as well as the ## ensemble minimum (lower) ### and maximum (upper) of the respective indicator ### If no cal file ensemble can be provided, set ensemble=F ### (but then make sure you have a calibration.cal with fitted parameters in ## the txt folder) ### collect average annual output of water quantity and quality at outlet channel ## (aggregated comparison) #r_dir &lt;- list.dirs(path, recursive = TRUE)[-1] #rch &lt;- sprintf(&quot;cha%03d&quot;, outflow_reach) # threshold for low flow # the number of days below this threshold will later be calculated # default value is the 5th percentile of rcp26 for the baseline period (average across all rcms) # feel free to use another threshold value!! tmp_df &lt;- ind_cha_dayII(r_dir, rch, &#39;Q_p95p05&#39;, ensemble=F) threshold_lowQ &lt;- mean(tmp_df[seq(2,17,3),8]) #adjust channel # threshold for high flow # the number of days beyond this threshold will later be calculated # default value is the 95th percentile of rcp26 for the baseline period (average across all rcms) # feel free to use another threshold value!! threshold_highQ &lt;- mean(tmp_df[seq(2,17,3),4]) #adjust channel ### collect indicators related to the average annual water balance cha_aa_all &lt;- ind_cha_aa(r_dir, rch) #adjust channel ### collect indicators related to the daily dynamics Water, N, P, Sed cha_day_all &lt;- ind_cha_dayII(r_dir, rch, &#39;all&#39;, threshold_lowQ = threshold_lowQ, threshold_highQ = threshold_highQ, threshold_N = threshold_N, threshold_P = threshold_P, threshold_Sed = threshold_Sed) #adjust channel ### collect HRU-based indicators related to water quality (average annual losses) hru_aa_nb_all &lt;- ind_hru_aa_nb(r_dir) #adjust channel ### collect HRU-based indicators related to water quantity (average annual values) hru_aa_wb_all &lt;- ind_hru_aa_wb(r_dir) ### collect HRU-based indicators related to water quantity (average annual for ## specified months) ## please specify start and end months of interest for the soil water analysis sw_periods &lt;- list(c(5:9), 5, 6, 7, 8, 9) #this is an example for printing sw for ## the period May to September and also for each single month in that period hru_mon_all &lt;- ind_hru_mon_wb(r_dir, period = sw_periods, nrows = 54) #might take a while ### collect cropping information for all scenarios - grain units and cultivated ## hectare average annual ## define 1) path, 2) crop selection, 3) type of output: a) yield, b) ha, 4) ## specify grain units equivalent for # all of the selected crops (if you just keep the parameter &#39;grain_units&#39;, ## there is already a parameterisation for # &#39;wwht&#39;, &#39;akgs&#39;, &#39;wbar&#39;, &#39;wira&#39;, &#39;csil&#39;, &#39;wiry&#39;, &#39;sgbt&#39;,&#39;barl&#39; # the measure list (measr.list) can be adapted to the measures you want to compare #adjust crop_aa_gu &lt;- ind_bsn_aa_crp(r_dir, crop_sel, out_type = &quot;yield&quot;, grain_units) crop_aa_ha &lt;- ind_bsn_aa_crp(r_dir, crop_sel, out_type = &quot;ha&quot;, grain_units) ### collect cropping information for all scenarios - Crop specific average annual ## yield and ha crop_aa_all &lt;- ind_bsn_aa_crp_ha_Y(r_dir, crop_sel) ##------------------------------------------------------------------------------ ## 11) Aggregate outputs into one dataframe for plotting ##------------------------------------------------------------------------------ ### combine data of interest in one dataframe for plotting df_plot &lt;- cha_aa_all for(l in list(cha_day_all, hru_aa_nb_all, hru_aa_wb_all, hru_mon_all, crop_aa_gu, crop_aa_ha, crop_aa_all)) df_plot &lt;- left_join(df_plot, l, by = &quot;scen_name&quot;) df_plot_long &lt;- pivot_longer(df_plot, cols = -scen_name, names_to = &quot;indi&quot;, values_to = &quot;value&quot;) ## Get long format for plotting df_plot_long &lt;- df_plot_long[!grepl(&quot;_H$&quot;, df_plot_long$scen_name),] %&gt;% mutate(scen_base = gsub(&quot;_[[:alpha:]]*$&quot;,&quot;&quot;,scen_name)) %&gt;% left_join(df_plot_long[grepl(&quot;_H$&quot;, df_plot_long$scen_name),] %&gt;% mutate(scen_base = gsub(&quot;_[[:alpha:]]*$&quot;,&quot;&quot;,scen_name)) %&gt;% dplyr::rename(value_base = value) %&gt;% select(-scen_name), by = c(&quot;scen_base&quot;, &quot;indi&quot;)) %&gt;% mutate(value = round(100*(value/value_base-1), 3)) %&gt;% select(-ends_with(&quot;base&quot;)) %&gt;% mutate(scen_name = toupper(scen_name)) %&gt;% mutate_all(~ifelse(is.nan(.), NA, .)) %&gt;% mutate(scen_name = gsub(&quot;_[^_]*_&quot;, &quot;_&quot;, scen_name)) %&gt;% separate(scen_name, into = c(&quot;RCP&quot;, &quot;Period&quot;), sep = &quot;_&quot;) %&gt;% mutate(Period = case_when(Period == &quot;N&quot; ~ &quot;Near future&quot;, Period == &quot;E&quot; ~ &quot;End century&quot;)) %&gt;% mutate(Period = factor(Period, levels = c(&quot;Near future&quot;, &quot;End century&quot;))) ##------------------------------------------------------------------------------ ## 12) Plotting your results ##------------------------------------------------------------------------------ ## Print all available indicators unique(df_plot_long$indi) ## [1] &quot;Q_mean&quot; &quot;Nload&quot; &quot;Pload&quot; &quot;Sedload&quot; ## [5] &quot;Q_max&quot; &quot;Q_max_aa&quot; &quot;Q_p95&quot; &quot;Q_p90&quot; ## [9] &quot;Q_p50&quot; &quot;Q_p10&quot; &quot;Q_p05&quot; &quot;Q_min&quot; ## [13] &quot;Q_min_aa&quot; &quot;Q_maxmin&quot; &quot;Q_maxmin_aa&quot; &quot;Q_low_days&quot; ## [17] &quot;Q_high_days&quot; &quot;Nconc_days&quot; &quot;Pconc_days&quot; &quot;Sedconc_days&quot; ## [21] &quot;N_loss&quot; &quot;P_loss&quot; &quot;Sed_loss&quot; &quot;N_loss_ratio&quot; ## [25] &quot;P_loss_ratio&quot; &quot;sw&quot; &quot;perc&quot; &quot;precip&quot; ## [29] &quot;snofall&quot; &quot;snomlt&quot; &quot;surq_gen&quot; &quot;latq&quot; ## [33] &quot;wateryld&quot; &quot;et&quot; &quot;ecanopy&quot; &quot;eplant&quot; ## [37] &quot;esoil&quot; &quot;surq_cont&quot; &quot;cn&quot; &quot;sw_300&quot; ## [41] &quot;pet&quot; &quot;qtile&quot; &quot;surq_cha&quot; &quot;latq_cha&quot; ## [45] &quot;sw_5_6_7_8_9&quot; &quot;sw_5&quot; &quot;sw_6&quot; &quot;sw_7&quot; ## [49] &quot;sw_8&quot; &quot;sw_9&quot; &quot;grain_units_aa&quot; &quot;crops_ha_aa&quot; ## [53] &quot;wwht_ha&quot; &quot;barl_ha&quot; &quot;oats_ha&quot; &quot;swht_ha&quot; ## [57] &quot;pota_ha&quot; &quot;wwht_yld_t_ha&quot; &quot;barl_yld_t_ha&quot; &quot;oats_yld_t_ha&quot; ## [61] &quot;swht_yld_t_ha&quot; &quot;pota_yld_t_ha&quot; ## Plotting selected indicators: divided into 4 thematic plots. See calc_indic.R for indicator explanations # First plot - water balance indicators (some of them can be removed if not relevant, others may be added) plot &lt;- throw_box(df_plot_long, c(&quot;precip&quot;, &quot;snofall&quot;, &quot;snomlt&quot;, &quot;pet&quot;, &quot;et&quot;, &quot;perc&quot;, &quot;sw&quot;, &quot;sw_5&quot;, &quot;sw_6&quot;, &quot;sw_7&quot;, &quot;sw_8&quot;, &quot;sw_9&quot;, &quot;sw_300&quot;, &quot;surq_cha&quot;, &quot;latq_cha&quot;, &quot;qtile&quot;)) ggsave(&quot;model_data/results/scs_water_balance_indicators.png&quot;, plot, width = 3000, height = 2100, units = &quot;px&quot;) #Second plot - flow indicators (some can be removed if not relevant, others can be added) plot &lt;- throw_box(df_plot_long, c(&quot;Q_mean&quot;, &quot;Q_p95&quot;, &quot;Q_p90&quot;, &quot;Q_p50&quot;, &quot;Q_p10&quot;, &quot;Q_p90p10&quot;, &quot;Q_low_days&quot;, &quot;Q_high_days&quot;)) ggsave(&quot;model_data/results/scs_flow_indicators.png&quot;, plot, width = 3000, height = 2100, units = &quot;px&quot;) # #throw_box funtion could be addapted to remove outliers or increase font size # throw_box(df_plot_long, c(&quot;Q_mean&quot;, &quot;Q_p95&quot;, &quot;Q_p90&quot;, &quot;Q_p50&quot;, &quot;Q_p10&quot;, # &quot;Q_p90p10&quot;, &quot;Q_low_days&quot;, &quot;Q_high_days&quot;), drop_outliers = TRUE, font_size = 14) #Third plot - water quality indicators (some can be removed if not relevant, others can be added) plot &lt;- throw_box(df_plot_long, c(&quot;Nload&quot;, &quot;Nconc_days&quot;, &quot;N_loss&quot;,&quot;Pload&quot;, &quot;Pconc_days&quot;, &quot;P_loss&quot;)) ggsave(&quot;model_data/results/scs_water_quality_indicators.png&quot;, plot, width = 3000, height = 2100, units = &quot;px&quot;) #Fourth plot - crop yields - major crops from each CS should be selected plot &lt;- throw_box(df_plot_long, c(&quot;swht_yld_t_ha&quot;, &quot;barl_yld_t_ha&quot;, &quot;oats_yld_t_ha&quot;, &quot;pota_yld_t_ha&quot;, &quot;wwht_yld_t_ha&quot;)) ggsave(&quot;model_data/results/scs_crop_yield.png&quot;, plot, width = 3000, height = 2100, units = &quot;px&quot;) ##------------------------------------------------------------------------------ ## 13) DATA FOR THE SYNTHESIS REPORT (send to Svajunas &amp; Mikolaj) ##------------------------------------------------------------------------------ saveRDS(df_plot_long, file = paste0(&quot;model_data/results/climate_report.rds&quot;)) 13.7 Saving RDS The core team would like this file from us: ##------------------------------------------------------------------------------ ## 13) DATA FOR THE SYNTHESIS REPORT (send to Svajunas &amp; Mikolaj) ##------------------------------------------------------------------------------ saveRDS(df_plot_long, file = paste0(&quot;model_data/results&quot;, &quot;/climate_report.rds&quot;)) "]]
